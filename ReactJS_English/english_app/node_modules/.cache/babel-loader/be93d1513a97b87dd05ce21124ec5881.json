{"ast":null,"code":"var _jsxFileName = \"/home/hainam/Desktop/ReactJS_English/english_app/src/MultiPlayer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useMultiAudio = urls => {\n  _s();\n\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (currentIndex !== -1 && currentIndex !== targetIndex) {\n      newPlayers[currentIndex].playing = false;\n      newPlayers[targetIndex].playing = true;\n    } else if (currentIndex !== -1) {\n      newPlayers[targetIndex].playing = false;\n    } else {\n      newPlayers[targetIndex].playing = true;\n    }\n\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause();\n    });\n  }, [sources, players]);\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener('ended', () => {\n        const newPlayers = [...players];\n        newPlayers[i].playing = false;\n        setPlayers(newPlayers);\n      });\n    });\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener('ended', () => {\n          const newPlayers = [...players];\n          newPlayers[i].playing = false;\n          setPlayers(newPlayers);\n        });\n      });\n    };\n  }, []);\n  return [players, toggle];\n};\n\n_s(useMultiAudio, \"n/r/CWmPdechwOgRbRDa0BQj1vc=\");\n\nconst MultiPlayer = _ref => {\n  _s2();\n\n  let {\n    urls\n  } = _ref;\n  const [players, toggle] = useMultiAudio(urls);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: players.map((player, i) => /*#__PURE__*/_jsxDEV(Player, {\n      player: player,\n      toggle: toggle(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MultiPlayer, \"CfYgjYeTyjzOoInnRblJVR3vUyk=\", false, function () {\n  return [useMultiAudio];\n});\n\n_c = MultiPlayer;\n\nconst Player = _ref2 => {\n  let {\n    player,\n    toggle\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Stream URL: \", player.url]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: player.playing ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Player;\nexport default MultiPlayer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MultiPlayer\");\n$RefreshReg$(_c2, \"Player\");","map":{"version":3,"sources":["/home/hainam/Desktop/ReactJS_English/english_app/src/MultiPlayer.js"],"names":["React","useState","useEffect","useMultiAudio","urls","sources","map","url","audio","Audio","players","setPlayers","playing","toggle","targetIndex","newPlayers","currentIndex","findIndex","p","forEach","source","i","play","pause","addEventListener","removeEventListener","MultiPlayer","player","Player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst useMultiAudio = urls => {\n  const [sources] = useState(\n    urls.map(url => {\n      return {\n        url,\n        audio: new Audio(url),\n      }\n    }),\n  )\n\n  const [players, setPlayers] = useState(\n    urls.map(url => {\n      return {\n        url,\n        playing: false,\n      }\n    }),\n  )\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players]\n    const currentIndex = players.findIndex(p => p.playing === true)\n    if (currentIndex !== -1 && currentIndex !== targetIndex) {\n      newPlayers[currentIndex].playing = false\n      newPlayers[targetIndex].playing = true\n    } else if (currentIndex !== -1) {\n      newPlayers[targetIndex].playing = false\n    } else {\n      newPlayers[targetIndex].playing = true\n    }\n    setPlayers(newPlayers)\n  }\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause()\n    })\n  }, [sources, players])\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener('ended', () => {\n        const newPlayers = [...players]\n        newPlayers[i].playing = false\n        setPlayers(newPlayers)\n      })\n    })\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener('ended', () => {\n          const newPlayers = [...players]\n          newPlayers[i].playing = false\n          setPlayers(newPlayers)\n        })\n      })\n    }\n  }, [])\n\n  return [players, toggle]\n}\n\nconst MultiPlayer = ({ urls }) => {\n  const [players, toggle] = useMultiAudio(urls)\n\n  return (\n    <div>\n      {players.map((player, i) => (\n        <Player key={i} player={player} toggle={toggle(i)} />\n      ))}\n    </div>\n  )\n}\n\nconst Player = ({ player, toggle }) => (\n  <div>\n    <p>Stream URL: {player.url}</p>\n    <button onClick={toggle}>{player.playing ? 'Pause' : 'Play'}</button>\n  </div>\n)\n\n\nexport default MultiPlayer"]},"metadata":{},"sourceType":"module"}